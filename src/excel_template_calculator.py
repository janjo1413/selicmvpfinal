"""
Calculadora Excel com template protegido
Usa arquivo template (com valores calculados) como base
Cria c√≥pias tempor√°rias para cada c√°lculo
"""
import logging
import shutil
import tempfile
from pathlib import Path
from typing import Any, List
from openpyxl import load_workbook
from excel_recalculator import ExcelRecalculator

logger = logging.getLogger(__name__)


class ExcelTemplateCalculator:
    """
    Mant√©m arquivo template intacto (com valores pr√©-calculados)
    Cria c√≥pia tempor√°ria para cada c√°lculo
    """
    
    def __init__(self, template_path: Path):
        self.template_path = template_path
        self.temp_path = None
        self.workbook = None
        
    def __enter__(self):
        """Context manager - cria c√≥pia tempor√°ria"""
        # Criar arquivo tempor√°rio
        temp_dir = Path(tempfile.gettempdir())
        self.temp_path = temp_dir / f"calc_{self.template_path.name}"
        
        logger.info(f"Criando c√≥pia tempor√°ria: {self.temp_path}")
        shutil.copy2(self.template_path, self.temp_path)
        
        logger.info(f"Abrindo c√≥pia tempor√°ria...")
        self.workbook = load_workbook(self.temp_path, data_only=False)
        
        return self
        
    def __exit__(self, exc_type, exc_val, exc_tb):
        """Context manager - fecha e deleta c√≥pia"""
        if self.workbook:
            self.workbook.close()
            
        # Deletar arquivo tempor√°rio
        if self.temp_path and self.temp_path.exists():
            try:
                self.temp_path.unlink()
                logger.info(f"C√≥pia tempor√°ria deletada: {self.temp_path}")
            except Exception as e:
                logger.warning(f"Erro ao deletar temp: {e}")
            
    def write_cell(self, worksheet_name: str, address: str, value: Any):
        """Escreve valor em c√©lula"""
        try:
            ws = self.workbook[worksheet_name]
            ws[address] = value
            logger.debug(f"Escrito: {worksheet_name}!{address} = {value}")
        except Exception as e:
            logger.error(f"Erro ao escrever {address}: {e}")
            raise
            
    def save_workbook(self):
        """Salva workbook tempor√°rio (necess√°rio para rec√°lculo)"""
        try:
            self.workbook.save(self.temp_path)
            logger.debug(f"Workbook salvo: {self.temp_path}")
        except Exception as e:
            logger.error(f"Erro ao salvar workbook: {e}")
            raise
    
    def recalculate_workbook(self) -> bool:
        """
        For√ßa rec√°lculo do Excel usando win32com
        Deve ser chamado ap√≥s escrever valores e antes de ler resultados
        
        Returns:
            True se recalculou com sucesso, False caso contr√°rio
        """
        if not ExcelRecalculator.is_available():
            logger.warning("‚ö†Ô∏è win32com n√£o dispon√≠vel - pulando rec√°lculo Excel")
            return False
        
        try:
            # Fechar workbook openpyxl e aguardar
            if self.workbook:
                self.workbook.close()
                self.workbook = None
            
            # Aguardar para garantir que arquivo foi liberado
            import time
            time.sleep(1.0)
            
            # Recalcular usando Excel COM
            logger.info("üîÑ Recalculando Excel via win32com...")
            success = ExcelRecalculator.recalculate_workbook(self.temp_path, visible=False)
            
            if success:
                logger.info("‚úÖ Excel recalculado com sucesso")
            else:
                logger.error("‚ùå Falha ao recalcular Excel")
            
            # Aguardar antes de reabrir
            time.sleep(1.0)
            
            # Reabrir workbook openpyxl
            self.workbook = load_workbook(self.temp_path, data_only=False)
            
            return success
            
        except Exception as e:
            logger.error(f"Erro ao recalcular workbook: {e}")
            # Tentar reabrir workbook mesmo em caso de erro
            if not self.workbook:
                try:
                    import time
                    time.sleep(1.0)
                    self.workbook = load_workbook(self.temp_path, data_only=False)
                except:
                    pass
            return False
            
    def read_range_calculated(self, worksheet_name: str, range_address: str) -> List[List]:
        """
        L√™ range com valores calculados
        Fecha e reabre com data_only=True
        """
        try:
            # Fechar workbook atual
            if self.workbook:
                self.workbook.close()
                
            # Reabrir com data_only=True para ler valores
            logger.debug(f"Reabrindo temp com data_only=True para {range_address}")
            wb_read = load_workbook(self.temp_path, data_only=True)
            ws = wb_read[worksheet_name]
            
            # Ler range
            cells = ws[range_address]
            
            # Converter para lista de listas
            if isinstance(cells, tuple):
                # Range com m√∫ltiplas c√©lulas
                result = []
                for row in cells:
                    if isinstance(row, tuple):
                        result.append([cell.value for cell in row])
                    else:
                        result.append([row.value])
            else:
                # C√©lula √∫nica
                result = [[cells.value]]
                
            wb_read.close()
            
            # Reabrir workbook para continuar (caso necess√°rio)
            self.workbook = load_workbook(self.temp_path, data_only=False)
            
            return result
            
        except Exception as e:
            logger.error(f"Erro ao ler range {range_address}: {e}")
            raise
